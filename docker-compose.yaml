services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-roop}:${POSTGRES_PASSWORD:-roop_password}@db:5432/${POSTGRES_DB:-roop_marine_ops}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-roop}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-roop_password}
      - POSTGRES_DB=${POSTGRES_DB:-roop_marine_ops}
      
      # Application configuration
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    networks:
      - roop-network

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-roop} -d ${POSTGRES_DB:-roop_marine_ops}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - roop-network

volumes:
  postgres_data:

networks:
  roop-network:
    driver: bridge